<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Marcello Galhardo</title><link>https://marcellogalhardo.dev/</link><description>Recent content on Marcello Galhardo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 05 Feb 2021 09:02:50 +0100</lastBuildDate><atom:link href="https://marcellogalhardo.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>N26 Path to Anvil</title><link>https://marcellogalhardo.dev/blog/2021/02/05/n26-path-to-anvil/</link><pubDate>Fri, 05 Feb 2021 09:02:50 +0100</pubDate><guid>https://marcellogalhardo.dev/blog/2021/02/05/n26-path-to-anvil/</guid><description>This post represents my personal experience while working at N26. I do not speak for the company nor by other employees.
N26 Android App current codebase has a million lines of code, 280+ modules, and 30+ engineers working in 4 different countries and different timezones in a mono repository. Our modules are divided into features and libraries, and we have been using &amp;ldquo;Sample Apps&amp;rdquo; for years now as our full app build time might take up to 20 minutes.</description></item><item><title>Humble Views, Proud ViewModels</title><link>https://marcellogalhardo.dev/blog/2021/02/01/humble-views-proud-viewmodels/</link><pubDate>Mon, 01 Feb 2021 09:02:50 +0100</pubDate><guid>https://marcellogalhardo.dev/blog/2021/02/01/humble-views-proud-viewmodels/</guid><description>The Android Community has long advocated that Activities and Fragments were views - but this perception has changed over time. For good. Let&amp;rsquo;s dive deep into how to design views and view models, how they wire to a LifecycleOwner, and how this can positively impact your&amp;rsquo;s app testability.
To better describe how to build humble views we will be developing an elementary Sign-Up form with an email, a password text field and two buttons: a cancel that pops the user&amp;rsquo;s back stack and a sign up that creates an account and moves the user to the home screen.</description></item><item><title>Factory Methods in Kotlin</title><link>https://marcellogalhardo.dev/blog/2020/02/01/factory-methods-in-kotlin/</link><pubDate>Sat, 01 Feb 2020 09:02:50 +0100</pubDate><guid>https://marcellogalhardo.dev/blog/2020/02/01/factory-methods-in-kotlin/</guid><description>When talking about Factory Methods extension functions tends to be favored in Kotlin - but it might be a challenge to name these functions in a discoverable way without polluting your classpath. Therefore, we can get inspiration on Kotlin&amp;rsquo;s Standard library to improve our naming.
Wrapping an instance If your intention is to get a given instance, for example javax.inject.Provider, create an instance of ViewModelProvider.Factory which internally uses it: you want a wrapper.</description></item><item><title>Dagger, ViewModels and Fragments</title><link>https://marcellogalhardo.dev/blog/2020/01/01/dagger-viewmodels-and-fragments/</link><pubDate>Wed, 01 Jan 2020 09:02:50 +0100</pubDate><guid>https://marcellogalhardo.dev/blog/2020/01/01/dagger-viewmodels-and-fragments/</guid><description>Dagger is a powerful DI framework but when combined with Architecture Components from Android it might cause some boilerplate: mainly when using ViewModels and Fragments with constructor injection.
Kotlin offers many options to deal with this boilerplate in an elegante way for simple use cases.
ViewModelProvider.Factory Dagger allows you to inject the Provider of any type available on the dependency graph and this provider can be easily mapped to ViewModelProvider.Factory.</description></item><item><title>About</title><link>https://marcellogalhardo.dev/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcellogalhardo.dev/about/</guid><description>Software engineer with over 5 years of experience with Android. I am a moderator of the Android Dev BR community, the largest network of Android developers in Brazil.
Contact me Email: marcello.galhardo@gmail.com Twitter: @marcellogalhard LinkedIn SpeakerDeck</description></item><item><title>Talks</title><link>https://marcellogalhardo.dev/talks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcellogalhardo.dev/talks/</guid><description> June 05, 2019: Railway Oriented Programming with Kotlin April 17, 2019: Effective Kotlin March 01, 2019: Modularizing Legacy Apps November 11, 2018: Android Modular Architecture January 24, 2017: Introduction to Dagger 2 January 24, 2017: Introdução ao Dagger 2 (PT-BR) September 06, 2016: SOLID no Android 2 (PT-BR)</description></item></channel></rss>