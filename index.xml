<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Marcello Galhardo</title><link>https://marcellogalhardo.dev/</link><description>Recent content on Marcello Galhardo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 02 Jun 2023 09:12:00 +0100</lastBuildDate><atom:link href="https://marcellogalhardo.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Injection Points</title><link>https://marcellogalhardo.dev/posts/injection-points/</link><pubDate>Fri, 02 Jun 2023 09:12:00 +0100</pubDate><guid>https://marcellogalhardo.dev/posts/injection-points/</guid><description>Android has made significant progress in becoming a DI-Friendly Framework. Throughout the years, new APIs like AppComponentFactory and FragmentFactory have been introduced, allowing apps to incorporate their own custom constructors and facilitating the development of testable code.
Please keep in mind that I will not delve into the concept of DI, SL, specific libraries or its significance. Instead, the focus will be solely on the Android APIs that enable constructor injection.</description></item><item><title>Namespace for Extension Functions</title><link>https://marcellogalhardo.dev/posts/2023/namespace-for-extension-functions/</link><pubDate>Sat, 25 Mar 2023 09:02:50 +0100</pubDate><guid>https://marcellogalhardo.dev/posts/2023/namespace-for-extension-functions/</guid><description>A few weeks ago, I had to create an extension function - a usual task for any Kotlin developer. But there were a few limitations:
The receiver was a common type, polluted with too many methods. The extension function was only relevant to my feature package. Creating a Gradle module was out of scope. Introducing a new type to hold the function felt like too much. Kotlin doesn&amp;rsquo;t support package-private, yet.</description></item><item><title>Trampoline Activities</title><link>https://marcellogalhardo.dev/posts/2023/trampoline-activities/</link><pubDate>Mon, 06 Mar 2023 09:02:50 +0100</pubDate><guid>https://marcellogalhardo.dev/posts/2023/trampoline-activities/</guid><description>Today, I came across the term &amp;ldquo;Trampoline Activities&amp;rdquo;. Although it&amp;rsquo;s not an official name (or is it?), I&amp;rsquo;ve noticed it is a typical pattern and have decided to make a &amp;ldquo;How To&amp;rdquo; guide.
What are Trampoline Activities? A Trampoline Activity is an Activity that launches another activity and finishes itself. It may include conditional logic to determine which activity to launch or transforming the parameters before sending it to the next Activity.</description></item><item><title>Deep Models</title><link>https://marcellogalhardo.dev/posts/2021/10/07/deep-models/</link><pubDate>Thu, 07 Oct 2021 09:02:50 +0100</pubDate><guid>https://marcellogalhardo.dev/posts/2021/10/07/deep-models/</guid><description>Modeling is a critical task in Software Development: good models reduce the risk of bugs, increase readability and improve maintainability. However, we can often see developers focusing on &amp;ldquo;How can I code this?&amp;rdquo;, and they are done with their task when they find a way to code it. This inherently reduces the domain modeling to the abuse of primitives and shallow design where any inconsistent state is allowed.
To better explain, let&amp;rsquo;s consider the hypothetical requirements:</description></item><item><title>Using Compose Beta on AS 4.1</title><link>https://marcellogalhardo.dev/posts/2021/03/30/using-compose-beta-on-as-4-1/</link><pubDate>Tue, 30 Mar 2021 17:37:41 +0200</pubDate><guid>https://marcellogalhardo.dev/posts/2021/03/30/using-compose-beta-on-as-4-1/</guid><description>Jetpack Compose hit Beta! Many teams are excited to experiment with Compose, but as you might know, since 1.0.0-alpha04, the compiler has been refactored to a new group and became incompatible with the current Android Studio (AS) 4.1 stable:
Compose Version 1.0.0-alpha04 is only compatible with Android Studio 4.2 Canary 13 and later.
Been forced to use a Canary version of AS is a real bummer. There are cases in which you want to explore Compose in a real-world application (e.</description></item><item><title>N26 Path to Anvil</title><link>https://marcellogalhardo.dev/posts/2021/02/05/n26-path-to-anvil/</link><pubDate>Fri, 05 Feb 2021 09:02:50 +0100</pubDate><guid>https://marcellogalhardo.dev/posts/2021/02/05/n26-path-to-anvil/</guid><description>This post represents my personal experience while working at N26. I do not speak for the company nor by other employees.
N26 Android App current codebase has a million lines of code, 280+ modules, and 30+ engineers working in 4 different countries and different timezones in a mono repository. Our modules are divided into features and libraries, and we have been using &amp;ldquo;Sample Apps&amp;rdquo; for years now as our full app build time might take up to 20 minutes.</description></item><item><title>Humble Views, Proud ViewModels</title><link>https://marcellogalhardo.dev/posts/2021/02/01/humble-views-proud-viewmodels/</link><pubDate>Mon, 01 Feb 2021 09:02:50 +0100</pubDate><guid>https://marcellogalhardo.dev/posts/2021/02/01/humble-views-proud-viewmodels/</guid><description>The Android Community has long advocated that Activities and Fragments were views - but this perception has changed over time. For good. Let&amp;rsquo;s dive deep into how to design views and view models, how they wire to a LifecycleOwner, and how this can positively impact your&amp;rsquo;s app testability.
To better describe how to build humble views we will be developing an elementary Sign-Up form with an email, a password text field and two buttons: a cancel that pops the user&amp;rsquo;s back stack and a sign up that creates an account and moves the user to the home screen.</description></item><item><title>Naming Factory Methods</title><link>https://marcellogalhardo.dev/posts/2020/02/01/naming-factory-methods/</link><pubDate>Sat, 01 Feb 2020 09:02:50 +0100</pubDate><guid>https://marcellogalhardo.dev/posts/2020/02/01/naming-factory-methods/</guid><description>When talking about Factory Methods, extension functions tend to be favored in Kotlin - but it might be a challenge to name these functions in a discoverable way without polluting your project&amp;rsquo;s namespace. A good source of inspiration is Kotlin&amp;rsquo;s Standard library: it contains many examples we can use as a base when deciding how to design a function.
Wrapping an instance If you intend to get a given instance and adapt to one different object to follow another contract, for example, creating a ViewModelProvider.</description></item><item><title>About</title><link>https://marcellogalhardo.dev/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcellogalhardo.dev/about/</guid><description>Software engineer with over 7 years of experience with Android. I have been building software professionally since 2012, starting on Web and Backend, later on Desktop, and finally, on Android. I worked with small teams at Quandoo, to dozens of engineers working on the same codebase at N26 and Delivery Hero. At N26, I worked on the Consumer App and later led the Android Platform Team. The apps I worked on had millions of downloads used in more than 20 countries.</description></item><item><title>Talks</title><link>https://marcellogalhardo.dev/talks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcellogalhardo.dev/talks/</guid><description> April 29, 2021: Anvil na Prática (PT-BR) June 05, 2019: Railway Oriented Programming with Kotlin April 17, 2019: Effective Kotlin March 01, 2019: Modularizing Legacy Apps November 11, 2018: Android Modular Architecture January 24, 2017: Introduction to Dagger 2 January 24, 2017: Introdução ao Dagger 2 (PT-BR) September 06, 2016: SOLID no Android 2 (PT-BR)</description></item><item><title>Uses</title><link>https://marcellogalhardo.dev/uses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://marcellogalhardo.dev/uses/</guid><description>Software File Manager: Marta Window Manager: Tiles Window Switcher: Contexts App Launcher &amp;amp; Productivity: Alfred Dock: uBar Calendar &amp;amp; Tasks: Hypercal Diagrams, Personal: Diagrams Diagrams, Work: PlantUML IDE: IntelliJ IDEA with Dracula Pro Knowledge Management: Obsidian with Zettelkasten Hardware Professional Machine: 2020 13&amp;quot; Macbook Pro Keyboard: Ultimate Hacking Keyboard v2 Apple Magic Mouse Ergonomics Chair: JÄRVFJÄLLET</description></item></channel></rss>