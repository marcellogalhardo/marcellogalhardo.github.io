<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Kmp on Marcello Galhardo</title><link>https://marcellogalhardo.dev/tags/kmp/</link><description>Recent content in Kmp on Marcello Galhardo</description><generator>Hugo -- 0.123.8</generator><language>en</language><copyright>CC BY-NC 4.0</copyright><lastBuildDate>Fri, 29 Nov 2024 16:09:00 +0100</lastBuildDate><atom:link href="https://marcellogalhardo.dev/tags/kmp/index.xml" rel="self" type="application/rss+xml"/><item><title>Function Properties in Data Classes are Code Smells</title><link>https://marcellogalhardo.dev/posts/function-properties-in-data-classes-are-code-smells/</link><pubDate>Fri, 29 Nov 2024 16:09:00 +0100</pubDate><guid>https://marcellogalhardo.dev/posts/function-properties-in-data-classes-are-code-smells/</guid><description>To me, using functions as properties in the primary constructor of a data class is a code smell. Here&amp;rsquo;s why:
Data classes represent data. Data is a value. Data is never executed. Functions are not data. They produce values when executed. A function returns a value. A procedure runs a command. In either case, these are behaviors, not data.
Why It Matters Kotlin generates key methods for data classes based on the properties in the primary constructor, such as:</description></item><item><title>Robolectric in commonTest</title><link>https://marcellogalhardo.dev/posts/robolectric-in-common-test/</link><pubDate>Thu, 28 Nov 2024 16:15:00 +0100</pubDate><guid>https://marcellogalhardo.dev/posts/robolectric-in-common-test/</guid><description>Sharing tests across Kotlin Multiplatform (KMP) projects can be tricky when dealing with platform-specific APIs like Android&amp;rsquo;s Bundle. commonTest on Android relies on the androidTest source set, which uses an empty android.jar, leading to test failures.
The Solution The ideal solution is to avoid platform-specific APIs in commonTest.
If that’s not an option, you can use Robolectric in your commonTest source set to access functional Android classes. This approach:
Allows testing of platform-specific code in commonTest.</description></item><item><title>Extension Shadowing for Actual Declarations in KMP</title><link>https://marcellogalhardo.dev/posts/extension-shadowing-for-actual-declarations-in-kmp/</link><pubDate>Thu, 07 Nov 2024 15:49:00 +0100</pubDate><guid>https://marcellogalhardo.dev/posts/extension-shadowing-for-actual-declarations-in-kmp/</guid><description>Heads-up: this article assumes familiarity with Kotlin&amp;rsquo;s extension functions and expect and actual declarations in Kotlin Multiplatform (KMP).
My work has recently focused on &amp;ldquo;commonizing&amp;rdquo;1 APIs, and I came across KT-70012, which I believe merits attention.
In Kotlin JVM development, the EXTENSION_SHADOWED_BY_MEMBER warning indicates that an extension function is redundant, as it will always be overshadowed by a member function with the same name when invoked. However, in KMP, this behaviour can be useful, as shadowing may occur on some platforms but not all.</description></item></channel></rss>