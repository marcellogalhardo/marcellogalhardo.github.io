<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Marcello Galhardo</title><link>https://marcellogalhardo.dev/posts/</link><description>Recent content in Posts on Marcello Galhardo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Tue, 30 Mar 2021 17:37:41 +0200</lastBuildDate><atom:link href="https://marcellogalhardo.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Compose Beta on AS 4.1</title><link>https://marcellogalhardo.dev/posts/2021/03/30/using-compose-beta-on-as-4-1/</link><pubDate>Tue, 30 Mar 2021 17:37:41 +0200</pubDate><guid>https://marcellogalhardo.dev/posts/2021/03/30/using-compose-beta-on-as-4-1/</guid><description>Jetpack Compose hit Beta! Many teams are excited to experiment with Compose, but as you might know, since 1.0.0-alpha04, the compiler has been refactored to a new group and became incompatible with the current Android Studio (AS) 4.1 stable:
Compose Version 1.0.0-alpha04 is only compatible with Android Studio 4.2 Canary 13 and later.
Been forced to use a Beta version of AS is a real bummer. There are cases in which you want to explore Compose in a real-world application (e.</description><content type="html"><![CDATA[<p>Jetpack Compose hit Beta! Many teams are excited to experiment with Compose, but as you might know, since <a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler#compiler-1.0.0-alpha04">1.0.0-alpha04</a>, the compiler has been refactored to a new group and became incompatible with the current Android Studio (AS) 4.1 stable:</p>
<blockquote>
<p>Compose Version <code>1.0.0-alpha04</code> is only compatible with Android Studio 4.2 Canary 13 and later.</p>
</blockquote>
<p>Been forced to use a Beta version of AS is a real bummer. There are cases in which you want to explore Compose in a real-world application (e.g., converting a Design System to Compose) while letting developers work in parallel using the stable version 4.1 to ship production code. Happily, Compose is a standard Kotlin Compiler Plugin, and it is pretty straightforward to apply it directly to your project:</p>
<ol>
<li>Select the module you want to use Compose.</li>
<li>Remove the <a href="https://developer.android.com/jetpack/compose/setup#add-compose">default configuration</a> from Compose docs, as we will set it up manually.</li>
<li>Apply the compiler plugin and include the runtime to your module.</li>
</ol>
<p>As an example, let&rsquo;s configure Gradle with the latest Compose (<code>1.0.0-beta03</code>):</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-groovy" data-lang="groovy">android <span style="color:#f92672">{</span>
    defaultConfig <span style="color:#f92672">{</span>
        minSdkVersion <span style="color:#ae81ff">21</span>
    <span style="color:#f92672">}</span>

    <span style="color:#75715e">// Set both the Java and Kotlin compilers to target Java 8.
</span><span style="color:#75715e"></span>
    compileOptions <span style="color:#f92672">{</span>
        sourceCompatibility JavaVersion<span style="color:#f92672">.</span><span style="color:#a6e22e">VERSION_1_8</span>
        targetCompatibility JavaVersion<span style="color:#f92672">.</span><span style="color:#a6e22e">VERSION_1_8</span>
    <span style="color:#f92672">}</span>

    kotlinOptions <span style="color:#f92672">{</span>
        jvmTarget <span style="color:#f92672">=</span> JavaVersion<span style="color:#f92672">.</span><span style="color:#a6e22e">VERSION_1_8</span><span style="color:#f92672">.</span><span style="color:#a6e22e">toString</span><span style="color:#f92672">()</span>
        useIR <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

configurations <span style="color:#f92672">{</span>
    kotlinPlugin
<span style="color:#f92672">}</span>

<span style="color:#66d9ef">def</span> composeVersion <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;1.0.0-beta03&#34;</span>

dependencies <span style="color:#f92672">{</span>    
    kotlinPlugin <span style="color:#e6db74">&#34;androidx.compose.compiler:compiler:${composeVersion}&#34;</span>
    implementation <span style="color:#e6db74">&#34;androidx.compose.runtime:runtime:${composeVersion}&#34;</span>
<span style="color:#f92672">}</span>

tasks<span style="color:#f92672">.</span><span style="color:#a6e22e">withType</span><span style="color:#f92672">(</span>org<span style="color:#f92672">.</span><span style="color:#a6e22e">jetbrains</span><span style="color:#f92672">.</span><span style="color:#a6e22e">kotlin</span><span style="color:#f92672">.</span><span style="color:#a6e22e">gradle</span><span style="color:#f92672">.</span><span style="color:#a6e22e">tasks</span><span style="color:#f92672">.</span><span style="color:#a6e22e">KotlinCompile</span><span style="color:#f92672">).</span><span style="color:#a6e22e">configureEach</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">def</span> pluginConfiguration <span style="color:#f92672">=</span> configurations<span style="color:#f92672">.</span><span style="color:#a6e22e">kotlinPlugin</span>
    dependsOn<span style="color:#f92672">(</span>pluginConfiguration<span style="color:#f92672">)</span>
    doFirst <span style="color:#f92672">{</span>
       <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>pluginConfiguration<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
            <span style="color:#66d9ef">def</span> composePlugin <span style="color:#f92672">=</span> pluginConfiguration<span style="color:#f92672">.</span><span style="color:#a6e22e">files</span><span style="color:#f92672">.</span><span style="color:#a6e22e">find</span> <span style="color:#f92672">{</span> File file <span style="color:#f92672">-&gt;</span>
                file<span style="color:#f92672">.</span><span style="color:#a6e22e">path</span><span style="color:#f92672">.</span><span style="color:#a6e22e">contains</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/androidx.compose.compiler/compiler/${composeVersion}/&#34;</span><span style="color:#f92672">)</span>
            <span style="color:#f92672">}</span>
            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>composePlugin <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
                kotlinOptions<span style="color:#f92672">.</span><span style="color:#a6e22e">freeCompilerArgs</span> <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;-Xplugin=${composePlugin}&#34;</span>
            <span style="color:#f92672">}</span>
        <span style="color:#f92672">}</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Now you can <a href="https://developer.android.com/jetpack/compose/setup#compose-compiler">add Jetpack Compose toolkit dependencies</a> as established in the official docs:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-groovy" data-lang="groovy">dependencies <span style="color:#f92672">{</span>
    implementation <span style="color:#e6db74">&#34;androidx.compose.ui:ui:${composeVersion}&#34;</span>
    <span style="color:#75715e">// Tooling support (Previews, etc.)
</span><span style="color:#75715e"></span>    implementation <span style="color:#e6db74">&#34;androidx.compose.ui:ui-tooling:${composeVersion}&#34;</span>
    <span style="color:#75715e">// Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
</span><span style="color:#75715e"></span>    implementation <span style="color:#e6db74">&#34;androidx.compose.foundation:foundation:${composeVersion}&#34;</span>
    <span style="color:#75715e">// Material Design
</span><span style="color:#75715e"></span>    implementation <span style="color:#e6db74">&#34;androidx.compose.material:material:${composeVersion}&#34;</span>
    <span style="color:#75715e">// Material design icons
</span><span style="color:#75715e"></span>    implementation <span style="color:#e6db74">&#34;androidx.compose.material:material-icons-core:${composeVersion}&#34;</span>
    implementation <span style="color:#e6db74">&#34;androidx.compose.material:material-icons-extended:${composeVersion}&#34;</span>
    <span style="color:#75715e">// Integration with activities
</span><span style="color:#75715e"></span>    implementation <span style="color:#e6db74">&#34;androidx.activity:activity-compose:1.3.0-alpha05&#34;</span>
    <span style="color:#75715e">// Integration with ViewModels
</span><span style="color:#75715e"></span>    implementation <span style="color:#e6db74">&#34;androidx.lifecycle:lifecycle-viewmodel-compose:1.0.0-alpha03&#34;</span>

    <span style="color:#75715e">// UI Tests
</span><span style="color:#75715e"></span>    androidTestImplementation <span style="color:#e6db74">&#34;androidx.compose.ui:ui-test-junit4:${composeVersion}&#34;</span>
<span style="color:#f92672">}</span>
</code></pre></div><p>Once it is in place, you can build Compose Apps in your AS 4.1 stable. Note that you will not be able to use the basic IDE tooling (e.g., Preview) without opening your project in a higher version of Android Studio. Nevertheless, if you do not upgrade Android Gradle Plugin, this set-up enables you to switch between AS 4.1 and Arctic Fox and build the project with success. Keep in mind you should remove those manual configurations once you migrate to AS 4.2 or later.</p>
<p>Credits to <a href="https://twitter.com/JakeWharton">Jake Wharton</a>, for answering <a href="https://androidstudygroup.slack.com/archives/CJH03QASH/p1603978103094800">my question on Android Study Group</a> with the idea that originated this post.</p>
]]></content></item><item><title>N26 Path to Anvil</title><link>https://marcellogalhardo.dev/posts/2021/02/05/n26-path-to-anvil/</link><pubDate>Fri, 05 Feb 2021 09:02:50 +0100</pubDate><guid>https://marcellogalhardo.dev/posts/2021/02/05/n26-path-to-anvil/</guid><description>This post represents my personal experience while working at N26. I do not speak for the company nor by other employees.
N26 Android App current codebase has a million lines of code, 280+ modules, and 30+ engineers working in 4 different countries and different timezones in a mono repository. Our modules are divided into features and libraries, and we have been using &amp;ldquo;Sample Apps&amp;rdquo; for years now as our full app build time might take up to 20 minutes.</description><content type="html"><![CDATA[<p>This post represents my personal experience while working at N26. I do not speak for the company nor by other employees.</p>
<p>N26 Android App current codebase has a million lines of code, 280+ modules, and 30+ engineers working in 4 different countries and different timezones in a mono repository. Our modules are divided into features and libraries, and we have been using &ldquo;<a href="https://cashapp.github.io/2020-08-25/attacking-build-times-with-sample-apps">Sample Apps</a>&rdquo; for years now as our full app build time might take up to 20 minutes.</p>
<p>Today I will share a little about my story with Dagger inside the company, why we adopt Anvil, some of the challenges we faced, and how are the results so far.</p>
<h1 id="dagger-oh-my">Dagger, (oh, my)</h1>
<p>N26 has a long history with Dagger. We have been using it for years, we developed our customizations and libraries on top of it, and many of our architectural decisions were made relying on Dagger features.</p>
<p>Dagger is excellent but comes with a price when used with Kotlin. The more we grew, the more we were charged. Stub generation issues, slow build time, increasing boilerplate to wire <code>@dagger.Component</code>, new joiners avoided touching the graphs due to complexity&hellip;</p>
<p>Looking for solutions, we found <a href="https://dagger.dev/hilt/">Hilt by Google</a>. We enjoyed many of the ideas they proposed as the <a href="https://dagger.dev/hilt/monolithic.html">Monolithic Component</a> and the <a href="https://dagger.dev/hilt/testing.html">testing philosophy</a>. But the trade-off was not that good for us: a migration would be painful and would take months to years, to not say we did not appreciate the byte code manipulation and the extra KAPT processor.</p>
<p>Simultaneously, another solution appeared, which solved some of the same problems differently: <a href="https://github.com/square/anvil">Anvil</a>.</p>
<blockquote>
<p>Anvil is a Kotlin compiler plugin to make dependency injection with Dagger easier by automatically merging Dagger modules and component interfaces.</p>
</blockquote>
<h1 id="sharpening-your-blade">Sharpening your blade</h1>
<p>To get an idea of how Anvil would affect us, we started with a set of experiments. The first one would be to wire a few modules while keeping backward compatibility without impacting any feature developer. In a matter of hours, we managed to conclude it. In a week, we had many modules using Anvil. We did not identify any expressive build time impact.</p>
<p>We were happy with the result. We decided to be more ambitious: we selected our code base&rsquo;s prominent monolith module to fully migrated to Anvil, and afterward, we broke this monolith apart into small libraries. It took us a few months to complete the goal, but we succeeded and did not identify any expressive build time impact, again.</p>
<p>To be sure we were on the right path, we mapped the relationship of a few of our most complex modules before and after adopting Anvil. For a matter of company&rsquo;s privacy, all text is blurred, but you can still see the positive impact by noting the arrows:</p>
<p><img src="/images/2021/02/05/before-and-after.png" alt="Before and After"></p>
<p>Finally, we decided to go full Anvil: we turned on <a href="https://github.com/square/anvil#dagger-factory-generation">Anvil&rsquo;s Dagger Factory generation</a> in all modules that we could (20+ at the time). We identified build times improvements of ~50% for individual modules build times, ~10% for Sample Apps, and because Anvil does not rely on KAPT, we never saw any KAPT issue again on those modules.</p>
<p><img src="/images/2021/02/05/benchmark.png" alt="Benchmark"></p>
<p>Many improvements, but we believed we could take it further: let&rsquo;s take the good things from Hilt and bring it to Anvil.</p>
<h1 id="hilt-to-anvil">Hilt to Anvil</h1>
<p>We decided to adopt what we like from Hilt while using Anvil.</p>
<p>The first point was to provide a single monolith component, and for that, we started to merge the components and use Anvil&rsquo;s <code>@ContributesTo</code> to binding the modules instead. It took quite some time, it was challenging but it worked well.</p>
<p>The second one was to support some Jetpack Libraries. We started with <code>FragmentFactory</code> to leverage the constructor injector as much as possible. We created a <code>@FragmentKey</code> and used Dagger&rsquo;s multi-binding to wire everything. Here is how the code might look like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#a6e22e">@ContributesBinding</span>(Singleton<span style="color:#f92672">::</span><span style="color:#66d9ef">class</span>, FragmentFactory<span style="color:#f92672">::</span><span style="color:#66d9ef">class</span>)
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MultibindingFragmentFactory</span> <span style="color:#a6e22e">@Inject</span> <span style="color:#66d9ef">constructor</span>(
    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> map: Map&lt;Class&lt;<span style="color:#66d9ef">out</span> Fragment&gt;, <span style="color:#a6e22e">@JvmSuppressWildcards</span> Provider&lt;Fragment&gt;&gt;
) : FragmentFactory() {

    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">instantiate</span>(classLoader: ClassLoader, className: String): Fragment {
        <span style="color:#66d9ef">val</span> fragmentClass = loadFragmentClass(classLoader, className)
        <span style="color:#66d9ef">return</span> map[fragmentClass]<span style="color:#f92672">?.</span><span style="color:#66d9ef">get</span>() <span style="color:#f92672">?:</span> <span style="color:#66d9ef">super</span>.instantiate(classLoader, className)
    }
}

<span style="color:#a6e22e">@Target</span>(
    AnnotationTarget.CLASS,
    AnnotationTarget.FUNCTION
)
<span style="color:#a6e22e">@Retention</span>(value = AnnotationRetention.RUNTIME)
<span style="color:#a6e22e">@MapKey</span>
<span style="color:#66d9ef">annotation</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FragmentKey</span>(<span style="color:#66d9ef">val</span> value: KClass&lt;<span style="color:#66d9ef">out</span> Fragment&gt;)

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Activity</span> : AppCompatActivity() {

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> component: MainComponent
        <span style="color:#66d9ef">get</span>() = TODO(<span style="color:#e6db74">&#34;Retrieve your Monolith Component&#34;</span>)

    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">onCreate</span>(savedInstanceState: Bundle?) {
        supportFragmentManager.fragmentFactory = component.getFragmentFactory()
        <span style="color:#66d9ef">super</span>.onCreate(savedInstanceState)
    }
}
</code></pre></div><p>And now to wire your <code>Fragment</code>, you can simple:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#a6e22e">@ContributesMultibinding</span>(Singleton<span style="color:#f92672">::</span><span style="color:#66d9ef">class</span>)
<span style="color:#a6e22e">@FragmentKey</span>(HomeFragment<span style="color:#f92672">::</span><span style="color:#66d9ef">class</span>)
<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HomeFragment</span> <span style="color:#a6e22e">@Inject</span> <span style="color:#66d9ef">constructor</span>(
    <span style="color:#75715e">// Dependencies goes here. :)
</span><span style="color:#75715e"></span>) : Fragment()
</code></pre></div><p>For more details around Fragments, check the <a href="https://developer.android.com/guide/fragments">official guide</a>.</p>
<p>Having a Monolith Component and relying on Fragment&rsquo;s constructor injector means we can invoke any fragment from any place of our application, and things &ldquo;will work&rdquo;. Scoping becomes intuitive for those classes. If you inject an object in the <code>Fragment</code> is a fragment scope, if you inject into the <code>ViewModel</code> is a view model scope. We also offer a <code>SessionScope</code> and <code>Singleton</code> scope.</p>
<p>For <code>ViewModels</code> a simple <code>Provider&lt;ViewModel&gt;</code> or <code>AssistedInject</code>, if you need an instance of <code>SavedStateHandle</code>, will do the trick.</p>
<p>And finally, testing: Anvil offers a <a href="https://github.com/square/anvil#exclusions">replace module feature</a> that is handful to provide new dependencies during tests. For that, we create helper modules called <code>testing</code> and we provide fake dependencies of those replacing the production modules. Developers that include the <code>testing</code> in their test classpath can automatically interact with our testing utilities (or create their own, if required). To be completely honest here, it is more of an ongoing process.</p>
<p><img src="/images/2021/02/05/module-structure.png" alt="Module Structure"></p>
<h1 id="conclusion">Conclusion</h1>
<p>Anvil is a robust and straightforward solution. It does what it suppose to do and does it well. It benefits from a seamless synergy with Dagger, while not being opinionated and letting you decide how you integrate with other libraries (or not integrating it at all).</p>
<p>Also, the fact it does not rely on KAPT is a <strong>tremendous advantage</strong> for large projects and should be kept in mind while deciding between Anvil or Hilt. I&rsquo;m delighted with the overall experience, and I enjoy seeing how many feature developers started to migrate away from KAPT to Anvil proactively:</p>
<p><img src="/images/2021/02/05/no-more-kapt.png" alt="Kill KAPT"></p>
<p>Finally, as you can see above, many of the Hilt&rsquo;s features can be implemented in Anvil. However, it is vital to keep in mind Anvil is not a silver bullet. It is essential to have people in your team that understand Dagger and Dependency Injection to build the integrations you might need.</p>
<h1 id="update-20210225">Update 2021.02.25</h1>
<p>As many people reached out asking advice on how to implement some Hilt features (e.g., ViewModelScope, SavedStateHandle, and others), I created a <a href="https://github.com/marcellogalhardo/hilt-to-anvil">small showcase project</a>.</p>
<h1 id="update-20210319">Update 2021.03.19</h1>
<p>Updated <code>MultibindingFragmentFactory</code> example and <a href="https://github.com/marcellogalhardo/hilt-to-anvil">showcase project</a>  to use new <code>@ContributesMultibinding</code> from <a href="https://github.com/square/anvil/releases/tag/v2.2.0">Anvil 2.2.0</a>.</p>
<h1 id="credits">Credits</h1>
<p>Thanks to <a href="https://twitter.com/maryte_chietera">Maria Chietera</a>, <a href="https://twitter.com/orafaaraujo">Rafael Araujo</a>, <a href="https://twitter.com/laggedHero">Tiago Cunha</a>, <a href="https://twitter.com/fabiocarballo">Fabio Carballo</a>, and <a href="https://twitter.com/s_anastasov">Stojan Anastasov</a> proofread review! 🔍</p>
<p>And a special thank you to <a href="https://twitter.com/vRallev">Ralf Wondratschek</a> for early feedback and creating Anvil! :knife:</p>
<p>If you like my posts, follow me on Twitter: <a href="https://twitter.com/marcellogalhard">@marcellogalhard</a></p>
]]></content></item><item><title>Humble Views, Proud ViewModels</title><link>https://marcellogalhardo.dev/posts/2021/02/01/humble-views-proud-viewmodels/</link><pubDate>Mon, 01 Feb 2021 09:02:50 +0100</pubDate><guid>https://marcellogalhardo.dev/posts/2021/02/01/humble-views-proud-viewmodels/</guid><description>The Android Community has long advocated that Activities and Fragments were views - but this perception has changed over time. For good. Let&amp;rsquo;s dive deep into how to design views and view models, how they wire to a LifecycleOwner, and how this can positively impact your&amp;rsquo;s app testability.
To better describe how to build humble views we will be developing an elementary Sign-Up form with an email, a password text field and two buttons: a cancel that pops the user&amp;rsquo;s back stack and a sign up that creates an account and moves the user to the home screen.</description><content type="html"><![CDATA[<p>The Android Community has long advocated that Activities and Fragments were views  -  but this perception has changed over time. For good. Let&rsquo;s dive deep into how to design views and view models, how they wire to a LifecycleOwner, and how this can positively impact your&rsquo;s app testability.</p>
<p><img src="/images/2021/02/01/sign-up-form.png" alt="Sign-Up Form"></p>
<p>To better describe how to build humble views we will be developing an elementary Sign-Up form with an email, a password text field and two buttons: a cancel that pops the user&rsquo;s back stack and a sign up that creates an account and moves the user to the home screen.</p>
<blockquote>
<p><a href="https://medium.com/r?url=https%3A%2F%2Fnetflixtechblog.com%2Fmaking-our-android-studio-apps-reactive-with-ui-components-redux-5e37aac3b244">&ldquo;Fragment is not your View&rdquo; - Juliano Moraes</a></p>
</blockquote>
<p><strong>Heads-up:</strong> this article expects you to be familiar with Dependency Injection (but no particular framework), Coroutines, Fragment, and View Binding. I won&rsquo;t use Jetpack&rsquo;s ViewModel, but the code here is entirely compatible. I will not cover any other aspects outside humble Views and ViewModels.</p>
<h1 id="views">Views</h1>
<p><code>View</code>s represent your UI. They can be written in code or, the most common way, using XML. Android views can not have a custom constructor as they must be created by the OS using reflection when inflating it from XML, during a configuration change, or process death.</p>
<p><code>View</code>s should not be aware of your architecture decisions. If you use MVP, MVC, MVVM, or MVI is irrelevant for a well-designed view.</p>
<p><code>View</code>s are hard to test and require an Instrumentation or Robolectric environment, which makes them slow. For that reason, we might want our views to be a <a href="https://martinfowler.com/bliki/HumbleObject.html">Humble Object</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SignUpView</span> <span style="color:#a6e22e">@JvmOverloads</span> <span style="color:#66d9ef">constructor</span>(
    context: Context,
    attrs: AttributeSet? = <span style="color:#66d9ef">null</span>
) : ConstraintLayout(context, attrs) {

    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> binding = SignUpViewBinding.inflate(LayoutInflater.from(context), <span style="color:#66d9ef">this</span>)

    <span style="color:#66d9ef">var</span> email: String
        <span style="color:#66d9ef">get</span>() = binding.email.text
        <span style="color:#66d9ef">set</span>(value) { binding.email.setText(value) }

    <span style="color:#66d9ef">var</span> password: String
        <span style="color:#66d9ef">get</span>() = binding.email.text
        <span style="color:#66d9ef">set</span>(value) { binding.email.setText(value) }

    <span style="color:#66d9ef">var</span> isSignUpEnabled: Boolean
        <span style="color:#66d9ef">get</span>() = binding.signUpButton.isEnabled
        <span style="color:#66d9ef">set</span>(value) { binding.signUpButton.isEnabled = value }

    <span style="color:#66d9ef">var</span> onSignUpClicked: () <span style="color:#f92672">-&gt;</span> Unit = {}
    <span style="color:#66d9ef">var</span> onCancelClicked: () <span style="color:#f92672">-&gt;</span> Unit = {}
    <span style="color:#66d9ef">var</span> onEmailChanged: (String) <span style="color:#f92672">-&gt;</span> Unit = {}
    <span style="color:#66d9ef">var</span> onPasswordChanged: (String) <span style="color:#f92672">-&gt;</span> Unit = {}

    <span style="color:#66d9ef">init</span> {
        binding.signUpButton.setOnClickListener { onSignUpClicked() }
        binding.onCancelClicked.setOnClickListener { onCancelClicked() }
        binding.email.doOnTextChanged { text, _, _, _ <span style="color:#f92672">-&gt;</span>
            onEmailChanged(text)
        }
        binding.password.doOnTextChanged { text, _, _, _ <span style="color:#f92672">-&gt;</span>
            onPasswordChanged(text)
        }
    }
}
</code></pre></div><h4 id="what-is-going-on-with-this-viewbinding">What is going on with this ViewBinding?</h4>
<p>In my <code>View</code>&rsquo;s XML root, I use a <code>&lt;merge&gt;</code> tag, and <code>ViewBinding</code> understands that: it provides me with an inflate function that attaches the view automatically to its parent.</p>
<h1 id="viewmodels">ViewModels</h1>
<p><code>ViewModel</code>&rsquo;s are a lightweight representation of your UI. The <code>ViewModel</code> is responsible for coordinating any user interaction to any business model required. It may offer a one or two-way binding to let those business models interact with the GUI.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SignUpViewModel</span>(
  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> savedStateHandle: SavedStateHandle,
  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> scope: CoroutineScope,
  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> repository: SignUpRepository,
) {

  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> _navigation = Channel&lt;Navigation&gt;()
  <span style="color:#66d9ef">val</span> navigation = _navigation.receiveAsFlow()

  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> _toastMessage = Channel&lt;ToastMessage&gt;()
  <span style="color:#66d9ef">val</span> toastMessage = _toastMessage.receiveAsFlow()

  <span style="color:#66d9ef">val</span> email = savedStateHandle.getStateFlow&lt;String&gt;(scope, <span style="color:#e6db74">&#34;email&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>)

  <span style="color:#66d9ef">val</span> password = savedStateHandle.getStateFlow&lt;String&gt;(scope, <span style="color:#e6db74">&#34;password&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>)

  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> _isSignUpEnabled = savedStateHandle.getStateFlow&lt;Boolean&gt;(scope, <span style="color:#e6db74">&#34;isSignUpEnabled&#34;</span>, <span style="color:#66d9ef">false</span>)
  <span style="color:#66d9ef">val</span> isSignUpEnabled = _isSignUpEnabled.asStateFlow()

  <span style="color:#66d9ef">init</span> {
    email.collectIn(scope) { updateSignUpEnabled() }
    password.collectIn(scope) { updateSignUpEnabled() }
  }

  <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">onSignUpClicked</span>() {
    runCatching {
      <span style="color:#75715e">// Try to parse e-mail and validate password. If yes, save.
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">val</span> email: String = <span style="color:#75715e">// parse e-mail.
</span><span style="color:#75715e"></span>      <span style="color:#66d9ef">val</span> password: String = <span style="color:#75715e">// verify if password is acceptable.
</span><span style="color:#75715e"></span>      repository.signUp(email, password)
    }.fold(
      onSuccess = { _navigation.sendIn(scope, Navigation.Push(SignUpRoutes.Home)) },
      onFailure = { _toastMessage.sendIn(scope, ToastMessage(R.string.generic_error)) },
    )
  }

  <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">onCancelClicked</span>() {
    _navigation.sendIn(scope, Navigation.Pop)
  }

  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">updateSignUpEnabled</span>() {
    <span style="color:#75715e">// Naive logic to enable sign up.
</span><span style="color:#75715e"></span>    _isSignUpEnabled = email.isNotBlank() <span style="color:#f92672">&amp;&amp;</span> password.isNotBlank()
  }
}
</code></pre></div><h4 id="why-expose-some-flows-as-mutablestateflow-and-othersno">Why expose some flows as MutableStateFlow and others no?</h4>
<p>Each field has a different requirement: two-way or one-way binding.</p>
<p>TextFields requires a two-way binding as we want to get updates when the user types a new content while preserving the ability to update its content whenever necessary. Exposing it as a <code>MutableStateFlow</code> allows us to move all sanitization logic to the view model (see <code>onSignUpClicked</code>) and ensure the View is as humble as possible.</p>
<p>The sign-up button state requires a one-way binding (see <code>isSignUpEnabled</code>)  -  only the <code>ViewModel</code> can change its state based in a validation logic.</p>
<h4 id="why-not-modeling-my-ui-state-as-a-single-flow-in-the-viewmodel">Why not modeling my UI State as a single flow in the ViewModel?</h4>
<p>The concepts here do not exclude a single view state, I believe they complement each other.</p>
<p>You can easily keep your view humble while modeling UI State as a single object on top of the ViewModel. In this case, the <code>ViewModel</code> would be responsible for handling the unidirectional data flow and doing the required diffs between each state emission within your bindings to enforce your UI is not being updated without demand. Therefore, let your view humble allow you to keep it agnostic of how you handle state, architecture decisions, and it enable you to test your <code>ViewModel</code> and classes above it as a unit very closely of how it would behave in the real world with a GUI: remember, the <code>View</code> is humble!</p>
<p>I will not cover these concepts here but for a better understanding of why you would like to model your UI State as a single sealed hierarchy and how to do it well, I highly recommend my friend&rsquo;s <a href="https://twitter.com/s_anastasov">Stojan Anastasov</a> post about the subject: <a href="https://lordraydenmk.github.io/2021/modelling-ui-state/">Modeling UI State</a>.</p>
<h1 id="lifecycleowner">LifecycleOwner</h1>
<p>The UI Controller. Usually, a <code>Fragment</code> responsible for a section of the screen. A <code>LifecycleOwner</code> is responsible to wire up a <code>View</code> to a <code>ViewModel</code>, delegate callbacks from the Android OS, handle configuration changes and more.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SignUpFragment</span> : Fragment() {

    <span style="color:#75715e">// Retain the instance across configuration changes.
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> viewModel <span style="color:#66d9ef">by</span> retain { entry <span style="color:#f92672">-&gt;</span>
        <span style="color:#66d9ef">val</span> repository: SignUpRepository = <span style="color:#75715e">// creates the repository
</span><span style="color:#75715e"></span>            SignUpViewModel(entry.savedStateHandle, entry.scope, repository)
    }

    <span style="color:#75715e">// Creates your View and connects to the ViewModel.
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">onCreateView</span>(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        <span style="color:#66d9ef">val</span> view = SignUpView(requireContext())

        <span style="color:#75715e">// Bind the View and ViewModel
</span><span style="color:#75715e"></span>        view.onSignUpClicked = viewModel<span style="color:#f92672">::</span>onSignUpClicked
        view.onCancelClicked = viewModel<span style="color:#f92672">::</span>onCancelClicked
        viewModel.email.observeIn(viewLifecycleOwner, view<span style="color:#f92672">::</span>email<span style="color:#f92672">::</span><span style="color:#66d9ef">set</span>)
        viewModel.password.observeIn(viewLifecycleOwner, view<span style="color:#f92672">::</span>password<span style="color:#f92672">::</span><span style="color:#66d9ef">set</span>)
        viewModel.isSignUpEnabled.observeIn(viewLifecycleOwner, view<span style="color:#f92672">::</span>isSignUpEnabled<span style="color:#f92672">::</span><span style="color:#66d9ef">set</span>)
        <span style="color:#75715e">// Other binds you might need with the view...
</span><span style="color:#75715e"></span>        viewModel.navigation.observeIn(viewLifecycleOwner) { navigation <span style="color:#f92672">-&gt;</span>
            <span style="color:#75715e">// Handle navigation.
</span><span style="color:#75715e"></span>        }
        viewModel.toastMessage.observeIn(viewLifecycleOwner) { message <span style="color:#f92672">-&gt;</span>
            <span style="color:#75715e">// Handle toast message.
</span><span style="color:#75715e"></span>        }

        <span style="color:#66d9ef">return</span> view
    }
}
</code></pre></div><h1 id="testing">Testing</h1>
<p>We designed our View as a Humble Object to let us quickly test both <code>View</code> and <code>ViewModel</code>. As you might have perceived, the <code>ViewModel</code> is straightforward to write tests as we do not depend on any Android related class.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SignUpViewModelTest</span> {

  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> scope = TestCoroutineScope()

  <span style="color:#75715e">// A fake version of the data source to not cross boundaries like network and database.
</span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">val</span> dataSource = TestDataSource()

  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">createSut</span>(): SignUpViewModel {
    <span style="color:#66d9ef">return</span> SignUpViewModel(SavedStateHandle(), scope, SignUpRepository(dataSource))
  }

  <span style="color:#75715e">// Set up, tear down, other tests, etc...
</span><span style="color:#75715e"></span>
  <span style="color:#a6e22e">@Test</span>
  <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">`given email and password field is not blank when signing up then navigate to the home`</span> {
    <span style="color:#75715e">// Arrange Phase
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">val</span> sut = createSut().apply {
      email = <span style="color:#e6db74">&#34;my.fake.person@gmail.com&#34;</span>
      password = <span style="color:#e6db74">&#34;8S#@2LAaB_.NJh(Y&#34;</span>
    }
    <span style="color:#66d9ef">var</span> actualNavigation: Navigation? = <span style="color:#66d9ef">null</span>
    scope.launch { sut.navigation.collect { actualNavigation = <span style="color:#66d9ef">it</span> } }

    <span style="color:#75715e">// Act Phase
</span><span style="color:#75715e"></span>    sut.onSignUpClicked()

    <span style="color:#75715e">// Assert Phase
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">val</span> expectedNavigation = Navigation.Push(SignUpRoutes.Home)
    assertThat(actualNavigation).isEqualTo(expectedNavigation)
  }
}
</code></pre></div><p>As the view is a humble object, there is nothing much to test on it. However, we might want to ensure that the UI behaves as expected when the <code>ViewModel</code> changes its attributes. For example:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SignUpViewTest</span> {

  <span style="color:#a6e22e">@Test</span>
  <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">`given sign up is disabled then the button should not be clickable`</span>() {
    launchViewInFragment { SignUpView(requireContext()) }
      .onView { <span style="color:#66d9ef">it</span>.isSignUpEnabled = <span style="color:#66d9ef">false</span> }
    
    onView(withId(R.id.signUpButton))
      .check(matches(not(isEnabled())))
  }
}
</code></pre></div><h1 id="conclusion">Conclusion</h1>
<p>It is relatively easy to see that <code>View</code>&rsquo;s, in Android, are strongly tied to the concept of their functionality. Humble View&rsquo;s is a way to create a clear separation between them and the Android Framework aiming for scalability, readability, and maybe the most essential point, testing.</p>
<p>In this article, we applied Humble Object pattern and MVVM concepts to create the circumstances that would allow developers to test <code>View</code>&rsquo;s and <code>ViewModel</code>&rsquo;s with ease even when they are strongly tied conceptually. Additionally, understanding that the <code>LifecycleOwner</code> is not your <code>View</code> will help you to ensure your code is highly testable.</p>
<p>Other than testing, projects that use this approach can easily compose more complex <code>View</code>&rsquo;s, and <code>ViewModel</code>&rsquo;s, from smaller objects. Lastly, this approach fit with Jetpack&rsquo;s Compose: replace the <code>View</code> with a <code>@Composable</code> and reuse the <code>ViewModel</code>!</p>
<p><strong>Happy Coding!</strong> 😎</p>
<h1 id="helper-functions--credits">Helper functions &amp; credits!</h1>
<p>I used <a href="http://github.com/marcellogalhardo/retained">Retained</a> library to keep the state of the <code>ViewModel</code> in configuration changes. I also published all the helper functions as <a href="https://gist.github.com/marcellogalhardo/a9985f7b3875fa41c379a2ba65d8ac9c">Github GISTs</a>, so you can use them as you please.</p>
<p>Special thanks to <a href="https://twitter.com/maryte_chietera">Maria Chietera</a>, <a href="https://twitter.com/TiagoDvl">Tiago Dávila</a>, <a href="https://twitter.com/orafaaraujo">Rafael Araujo</a>, <a href="https://twitter.com/laggedHero">Tiago Cunha</a>, <a href="https://twitter.com/felipeapedroso">Felipe Pedroso</a>, and <a href="https://twitter.com/s_anastasov">Stojan Anastasov</a> proofread review! 🔍</p>
<p>If you like my posts, follow me on Twitter: <a href="https://twitter.com/marcellogalhard">@marcellogalhard</a></p>
]]></content></item><item><title>Naming Factory Methods</title><link>https://marcellogalhardo.dev/posts/2020/02/01/naming-factory-methods/</link><pubDate>Sat, 01 Feb 2020 09:02:50 +0100</pubDate><guid>https://marcellogalhardo.dev/posts/2020/02/01/naming-factory-methods/</guid><description>When talking about Factory Methods, extension functions tend to be favored in Kotlin - but it might be a challenge to name these functions in a discoverable way without polluting your project&amp;rsquo;s namespace. A good source of inspiration is Kotlin&amp;rsquo;s Standard library: it contains many examples we can use as a base when deciding how to design a function.
Wrapping an instance If you intend to get a given instance and adapt to one different object to follow another contract, for example, creating a ViewModelProvider.</description><content type="html"><![CDATA[<p>When talking about Factory Methods, extension functions tend to be favored in Kotlin - but it might be a challenge to name these functions in a discoverable way without polluting your project&rsquo;s namespace. A good source of inspiration is Kotlin&rsquo;s Standard library: it contains many examples we can use as a base when deciding how to design a function.</p>
<h2 id="wrapping-an-instance">Wrapping an instance</h2>
<p>If you intend to get a given instance and adapt to one different object to follow another contract, for example, creating a <code>ViewModelProvider.Factory</code> that internally uses a <code>javax.inject.Provider</code>: you want a wrapper. Looking inside Kotlin&rsquo;s Standard library, we can find <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/as-executor.html">asExecutor</a> which does the same.</p>
<p>Here is an example on how it could look like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">fun</span> &lt;<span style="color:#a6e22e">VM</span> : <span style="color:#a6e22e">ViewModel</span>&gt; <span style="color:#a6e22e">Provider</span>&lt;<span style="color:#66d9ef">out</span> VM&gt;.asViewModelProviderFactory(): ViewModelProvider.Factory {
    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">object</span> <span style="color:#960050;background-color:#1e0010">: </span><span style="color:#a6e22e">ViewModelProvider</span>.Factory {
        <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">fun</span> &lt;<span style="color:#a6e22e">T</span> : <span style="color:#a6e22e">ViewModel</span>?&gt; <span style="color:#a6e22e">create</span>(modelClass: Class&lt;T&gt;): T {
            <span style="color:#a6e22e">@Suppress</span>(<span style="color:#e6db74">&#34;UNCHECKED_CAST&#34;</span>)
            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">get</span>() <span style="color:#66d9ef">as</span> T
        }
    }
}
</code></pre></div><h2 id="mapping-data">Mapping data</h2>
<p>If you intend to get a given instance and copy its data to a different format, for example, a <code>UserResponse</code> (DTO) to a <code>User</code> (domain entity): you want a mapper. Again, Kotlin&rsquo;s Standard library gives us a good example with <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/to-list.html?_ga=2.130355144.672183661.1577982073-802284527.1577800392">toList</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">UserDto</span>.toUser(): User {
    <span style="color:#66d9ef">return</span> User(
        name = Name(
            first = <span style="color:#66d9ef">this</span>.firstName,
            last = <span style="color:#66d9ef">this</span>.lastName
        ),
        email = Email(<span style="color:#66d9ef">this</span>.email),
        age = <span style="color:#66d9ef">this</span>.age
    )
}
</code></pre></div><h2 id="vararg-constructors">Vararg constructors</h2>
<p>If you need to provide a secondary constructor which accepts an unknown number of elements: you want a collection wrapper. For that, you can use a <code>vararg</code> method that returns the new composed object without polluting your class definition with an optional requirement. Kotlin&rsquo;s Standard Library offers us the convenient <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/list-of.html?_ga=2.139095028.672183661.1577982073-802284527.1577800392">listOf</a> as an example.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">controllerOf</span>(<span style="color:#66d9ef">vararg</span> controllers: Controller): Controller {
    <span style="color:#66d9ef">return</span> CompositeController(controllers)
}
</code></pre></div><h2 id="builders">Builders</h2>
<p>Kotlin&rsquo;s constructor combined with the named parameter covers most use cases of the Builder Design Pattern. However, sometimes you might want to create an instance where constructors are not suitable, with many optional parameters and configurable attributes where developers should be able to create alternative combinations highly configurable. Then, we can look to <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/build-string.html">buildString</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">inline</span> <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">buildImageLoader</span>(
    builderAction: ImageLoaderBuilder.() <span style="color:#f92672">-&gt;</span> Unit
): String

<span style="color:#66d9ef">data</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ImageLoaderBuilder</span>(
    <span style="color:#66d9ef">var</span> uri: URI,
    <span style="color:#a6e22e">@DrawableRes</span> <span style="color:#66d9ef">var</span> loadingPlaceholder: Int?,
    <span style="color:#a6e22e">@DrawableRes</span> <span style="color:#66d9ef">var</span> loadingPlaceholder: Int?,
    <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>)

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ImageLoader</span>

<span style="color:#75715e">// usage example
</span><span style="color:#75715e"></span><span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">main</span>() {
    <span style="color:#66d9ef">val</span> imageLoader = buildImageLoader {
        uri = validUri
        loadingPlaceholder = R.drawable.loading_placeholder
        errorPlaceholder = R.drawable.error_placeholder
        <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>    }
}
</code></pre></div><h2 id="fake-constructors-aka-factory-methods">Fake Constructors (aka, Factory Methods)</h2>
<p>Sometimes you need to provide a secondary constructor that takes advantage of <code>reified</code> or exposes an interface as a concrete type and hides the implementation: we can use a function named a class. Let&rsquo;s have a look into <a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/kotlinx-coroutines-core/common/src/flow/StateFlow.kt#L187">MutableStateFlow</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-kotlin" data-lang="kotlin"><span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">MutableStateFlow</span>&lt;T&gt; {
    <span style="color:#66d9ef">var</span> value: T
    <span style="color:#66d9ef">fun</span> <span style="color:#a6e22e">compareAndSet</span>(<span style="color:#66d9ef">expect</span>: T, update: T): Boolean
}

<span style="color:#66d9ef">fun</span> &lt;<span style="color:#a6e22e">T</span>&gt; <span style="color:#a6e22e">MutableStateFlow</span>(value: T): MutableStateFlow&lt;T&gt; {
    <span style="color:#66d9ef">return</span> StateFlowImpl(value <span style="color:#f92672">?:</span> NULL)
}
</code></pre></div><h1 id="conclusion">Conclusion</h1>
<p>As you can see, the Kotlin Standard library can be a good source of inspiration when designing code aiming for better discoverability between Kotlin Developers. Kotlin is a consistent language, and we can use it in our favor. Why not take advantage of that?</p>
]]></content></item></channel></rss>